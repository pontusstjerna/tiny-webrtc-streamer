"""
This type stub file was generated by pyright.
"""

import av
from typing import Iterator, List, Sequence, Tuple, Type, TypeVar
from av.frame import Frame
from av.packet import Packet
from ..jitterbuffer import JitterFrame
from .base import Decoder, Encoder

logger = ...
DEFAULT_BITRATE = ...
MIN_BITRATE = ...
MAX_BITRATE = ...
MAX_FRAME_RATE = ...
PACKET_MAX = ...
NAL_TYPE_FU_A = ...
NAL_TYPE_STAP_A = ...
NAL_HEADER_SIZE = ...
FU_A_HEADER_SIZE = ...
LENGTH_FIELD_SIZE = ...
STAP_A_HEADER_SIZE = ...
DESCRIPTOR_T = TypeVar("DESCRIPTOR_T", bound="H264PayloadDescriptor")
T = TypeVar("T")
def pairwise(iterable: Sequence[T]) -> Iterator[Tuple[T, T]]:
    ...

class H264PayloadDescriptor:
    def __init__(self, first_fragment) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @classmethod
    def parse(cls: Type[DESCRIPTOR_T], data: bytes) -> Tuple[DESCRIPTOR_T, bytes]:
        ...
    


class H264Decoder(Decoder):
    def __init__(self) -> None:
        ...
    
    def decode(self, encoded_frame: JitterFrame) -> List[Frame]:
        ...
    


def create_encoder_context(codec_name: str, width: int, height: int, bitrate: int) -> Tuple[av.CodecContext, bool]:
    ...

class H264Encoder(Encoder):
    def __init__(self) -> None:
        ...
    
    def encode(self, frame: Frame, force_keyframe: bool = ...) -> Tuple[List[bytes], int]:
        ...
    
    def pack(self, packet: Packet) -> Tuple[List[bytes], int]:
        ...
    
    @property
    def target_bitrate(self) -> int:
        """
        Target bitrate in bits per second.
        """
        ...
    
    @target_bitrate.setter
    def target_bitrate(self, bitrate: int) -> None:
        ...
    


def h264_depayload(payload: bytes) -> bytes:
    ...

