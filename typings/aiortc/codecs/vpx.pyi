"""
This type stub file was generated by pyright.
"""

from typing import List, Tuple, Type, TypeVar
from av.frame import Frame
from av.packet import Packet
from ..jitterbuffer import JitterFrame
from .base import Decoder, Encoder

DEFAULT_BITRATE = ...
MIN_BITRATE = ...
MAX_BITRATE = ...
MAX_FRAME_RATE = ...
PACKET_MAX = ...
DESCRIPTOR_T = TypeVar("DESCRIPTOR_T", bound="VpxPayloadDescriptor")
def number_of_threads(pixels: int, cpus: int) -> int:
    ...

class VpxPayloadDescriptor:
    def __init__(self, partition_start, partition_id, picture_id=..., tl0picidx=..., tid=..., keyidx=...) -> None:
        ...
    
    def __bytes__(self) -> bytes:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @classmethod
    def parse(cls: Type[DESCRIPTOR_T], data: bytes) -> Tuple[DESCRIPTOR_T, bytes]:
        ...
    


class Vp8Decoder(Decoder):
    def __init__(self) -> None:
        ...
    
    def __del__(self) -> None:
        ...
    
    def decode(self, encoded_frame: JitterFrame) -> List[Frame]:
        ...
    


class Vp8Encoder(Encoder):
    def __init__(self) -> None:
        ...
    
    def __del__(self) -> None:
        ...
    
    def encode(self, frame: Frame, force_keyframe: bool = ...) -> Tuple[List[bytes], int]:
        ...
    
    def pack(self, packet: Packet) -> Tuple[List[bytes], int]:
        ...
    
    @property
    def target_bitrate(self) -> int:
        """
        Target bitrate in bits per second.
        """
        ...
    
    @target_bitrate.setter
    def target_bitrate(self, bitrate: int) -> None:
        ...
    


def vp8_depayload(payload: bytes) -> bytes:
    ...

