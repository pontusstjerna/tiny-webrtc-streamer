"""
This type stub file was generated by pyright.
"""

import datetime
import enum
from dataclasses import dataclass
from typing import Any, List, Optional, Set, Type, TypeVar
from cryptography import x509
from cryptography.hazmat.primitives.asymmetric import ec
from OpenSSL import crypto
from pyee.asyncio import AsyncIOEventEmitter
from .rtcicetransport import RTCIceTransport
from .rtp import AnyRtcpPacket, RtpPacket

CERTIFICATE_T = TypeVar("CERTIFICATE_T", bound="RTCCertificate")
logger = ...
@dataclass(frozen=True)
class SRTPProtectionProfile:
    libsrtp_profile: int
    openssl_profile: bytes
    key_length: int
    salt_length: int
    def get_key_and_salt(self, src, idx: int) -> bytes:
        ...
    


SRTP_AEAD_AES_256_GCM = ...
SRTP_AEAD_AES_128_GCM = ...
SRTP_AES128_CM_SHA1_80 = ...
SRTP_PROFILES: List[SRTPProtectionProfile] = ...
def certificate_digest(x509: crypto.X509) -> str:
    ...

def generate_certificate(key: ec.EllipticCurvePrivateKey) -> x509.Certificate:
    ...

class State(enum.Enum):
    NEW = ...
    CONNECTING = ...
    CONNECTED = ...
    CLOSED = ...
    FAILED = ...


@dataclass
class RTCDtlsFingerprint:
    """
    The :class:`RTCDtlsFingerprint` dictionary includes the hash function
    algorithm and certificate fingerprint.
    """
    algorithm: str
    value: str
    ...


class RTCCertificate:
    """
    The :class:`RTCCertificate` interface enables the certificates used by an
    :class:`RTCDtlsTransport`.

    To generate a certificate and the corresponding private key use
    :func:`generateCertificate`.
    """
    def __init__(self, key: crypto.PKey, cert: crypto.X509) -> None:
        ...
    
    @property
    def expires(self) -> datetime.datetime:
        """
        The date and time after which the certificate will be considered invalid.
        """
        ...
    
    def getFingerprints(self) -> List[RTCDtlsFingerprint]:
        """
        Returns the list of certificate fingerprints, one of which is computed
        with the digest algorithm used in the certificate signature.
        """
        ...
    
    @classmethod
    def generateCertificate(cls: Type[CERTIFICATE_T]) -> CERTIFICATE_T:
        """
        Create and return an X.509 certificate and corresponding private key.

        :rtype: RTCCertificate
        """
        ...
    


@dataclass
class RTCDtlsParameters:
    """
    The :class:`RTCDtlsParameters` dictionary includes information relating to
    DTLS configuration.
    """
    fingerprints: List[RTCDtlsFingerprint] = ...
    role: str = ...


class RtpRouter:
    """
    Router to associate RTP/RTCP packets with streams.

    https://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-53
    """
    def __init__(self) -> None:
        ...
    
    def register_receiver(self, receiver, ssrcs: List[int], payload_types: List[int], mid: Optional[str] = ...): # -> None:
        ...
    
    def register_sender(self, sender, ssrc: int) -> None:
        ...
    
    def route_rtcp(self, packet: AnyRtcpPacket) -> Set:
        ...
    
    def route_rtp(self, packet: RtpPacket) -> Optional[Any]:
        ...
    
    def unregister_receiver(self, receiver) -> None:
        ...
    
    def unregister_sender(self, sender) -> None:
        ...
    


class RTCDtlsTransport(AsyncIOEventEmitter):
    """
    The :class:`RTCDtlsTransport` object includes information relating to
    Datagram Transport Layer Security (DTLS) transport.

    :param transport: An :class:`RTCIceTransport`.
    :param certificates: A list of :class:`RTCCertificate` (only one is allowed
        currently).
    """
    def __init__(self, transport: RTCIceTransport, certificates: List[RTCCertificate]) -> None:
        ...
    
    @property
    def state(self) -> str:
        """
        The current state of the DTLS transport.

        One of `'new'`, `'connecting'`, `'connected'`, `'closed'` or `'failed'`.
        """
        ...
    
    @property
    def transport(self): # -> RTCIceTransport:
        """
        The associated :class:`RTCIceTransport` instance.
        """
        ...
    
    def getLocalParameters(self) -> RTCDtlsParameters:
        """
        Get the local parameters of the DTLS transport.

        :rtype: :class:`RTCDtlsParameters`
        """
        ...
    
    async def start(self, remoteParameters: RTCDtlsParameters) -> None:
        """
        Start DTLS transport negotiation with the parameters of the remote
        DTLS transport.

        :param remoteParameters: An :class:`RTCDtlsParameters`.
        """
        ...
    
    async def stop(self) -> None:
        """
        Stop and close the DTLS transport.
        """
        ...
    


