"""
This type stub file was generated by pyright.
"""

from typing import Union
from av.frame import Frame
from av.packet import Packet
from ..mediastreams import MediaStreamTrack

logger = ...
REAL_TIME_FORMATS = ...

async def blackhole_consume(track: MediaStreamTrack) -> None:  # -> None:
    ...

class MediaBlackhole:
    """
    A media sink that consumes and discards all media.
    """

    def __init__(self) -> None: ...
    def addTrack(self, track: MediaStreamTrack) -> None:  # -> None:
        """
        Add a track whose media should be discarded.

        :param track: A :class:`aiortc.MediaStreamTrack`.
        """
        ...

    async def start(self) -> None:  # -> None:
        """
        Start discarding media.
        """
        ...

    async def stop(self) -> None:  # -> None:
        """
        Stop discarding media.
        """
        ...

def player_worker_decode(
    loop,
    container,
    streams,
    audio_track,
    video_track,
    quit_event,
    throttle_playback,
    loop_playback,
):  # -> None:
    ...

def player_worker_demux(
    loop,
    container,
    streams,
    audio_track,
    video_track,
    quit_event,
    throttle_playback,
    loop_playback,
):  # -> None:
    ...

class PlayerStreamTrack(MediaStreamTrack):
    def __init__(self, player, kind) -> None: ...
    async def recv(self) -> Union[Frame, Packet]: ...
    def stop(self):  # -> None:
        ...

class MediaPlayer:
    """
    A media source that reads audio and/or video from a file.

    Examples:

    .. code-block:: python

        # Open a video file.
        player = MediaPlayer('/path/to/some.mp4')

        # Open an HTTP stream.
        player = MediaPlayer(
            'http://download.tsi.telecom-paristech.fr/'
            'gpac/dataset/dash/uhd/mux_sources/hevcds_720p30_2M.mp4')

        # Open webcam on Linux.
        player = MediaPlayer('/dev/video0', format='v4l2', options={
            'video_size': '640x480'
        })

        # Open webcam on OS X.
        player = MediaPlayer('default:none', format='avfoundation', options={
            'video_size': '640x480'
        })

        #Â Open webcam on Windows.
        player = MediaPlayer('video=Integrated Camera', format='dshow', options={
            'video_size': '640x480'
        })

    :param file: The path to a file, or a file-like object.
    :param format: The format to use, defaults to autodect.
    :param options: Additional options to pass to FFmpeg.
    :param timeout: Open/read timeout to pass to FFmpeg.
    :param loop: Whether to repeat playback indefinitely (requires a seekable file).
    """

    def __init__(
        self, file, format=..., options=..., timeout=..., loop=..., decode=...
    ) -> None: ...
    @property
    def audio(self) -> MediaStreamTrack:
        """
        A :class:`aiortc.MediaStreamTrack` instance if the file contains audio.
        """
        ...

    @property
    def video(self) -> MediaStreamTrack:
        """
        A :class:`aiortc.MediaStreamTrack` instance if the file contains video.
        """
        ...

class MediaRecorderContext:
    def __init__(self, stream) -> None: ...

class MediaRecorder:
    """
    A media sink that writes audio and/or video to a file.

    Examples:

    .. code-block:: python

        # Write to a video file.
        player = MediaRecorder('/path/to/file.mp4')

        # Write to a set of images.
        player = MediaRecorder('/path/to/file-%3d.png')

    :param file: The path to a file, or a file-like object.
    :param format: The format to use, defaults to autodect.
    :param options: Additional options to pass to FFmpeg.
    """

    def __init__(self, file, format=..., options=...) -> None: ...
    def addTrack(self, track):  # -> None:
        """
        Add a track to be recorded.

        :param track: A :class:`aiortc.MediaStreamTrack`.
        """
        ...

    async def start(self):  # -> None:
        """
        Start recording.
        """
        ...

    async def stop(self):  # -> None:
        """
        Stop recording.
        """
        ...

class RelayStreamTrack(MediaStreamTrack):
    def __init__(self, relay, source: MediaStreamTrack, buffered: bool) -> None: ...
    async def recv(self):  # -> Frame:
        ...

    def stop(self):  # -> None:
        ...

class MediaRelay:
    """
    A media source that relays one or more tracks to multiple consumers.

    This is especially useful for live tracks such as webcams or media received
    over the network.
    """

    def __init__(self) -> None: ...
    def subscribe(
        self, track: MediaStreamTrack, buffered: bool = ...
    ) -> MediaStreamTrack:
        """
        Create a proxy around the given `track` for a new consumer.

        :param track: Source :class:`MediaStreamTrack` which is relayed.
        :param buffered: Whether there need a buffer between the source track and
            relayed track.

        :rtype: :class: MediaStreamTrack
        """
        ...
