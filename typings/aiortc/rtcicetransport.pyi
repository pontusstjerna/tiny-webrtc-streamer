"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Dict, List, Optional
from aioice import Candidate
from pyee.asyncio import AsyncIOEventEmitter
from .rtcconfiguration import RTCIceServer

STUN_REGEX = ...
TURN_REGEX = ...
logger = ...
@dataclass
class RTCIceCandidate:
    """
    The :class:`RTCIceCandidate` interface represents a candidate Interactive
    Connectivity Establishment (ICE) configuration which may be used to
    establish an RTCPeerConnection.
    """
    component: int
    foundation: str
    ip: str
    port: int
    priority: int
    protocol: str
    type: str
    relatedAddress: Optional[str] = ...
    relatedPort: Optional[int] = ...
    sdpMid: Optional[str] = ...
    sdpMLineIndex: Optional[int] = ...
    tcpType: Optional[str] = ...


@dataclass
class RTCIceParameters:
    """
    The :class:`RTCIceParameters` dictionary includes the ICE username
    fragment and password and other ICE-related parameters.
    """
    usernameFragment: Optional[str] = ...
    password: Optional[str] = ...
    iceLite: bool = ...


def candidate_from_aioice(x: Candidate) -> RTCIceCandidate:
    ...

def candidate_to_aioice(x: RTCIceCandidate) -> Candidate:
    ...

def connection_kwargs(servers: List[RTCIceServer]) -> Dict[str, Any]:
    ...

def parse_stun_turn_uri(uri: str) -> Dict[str, Any]:
    ...

class RTCIceGatherer(AsyncIOEventEmitter):
    """
    The :class:`RTCIceGatherer` interface gathers local host, server reflexive
    and relay candidates, as well as enabling the retrieval of local
    Interactive Connectivity Establishment (ICE) parameters which can be
    exchanged in signaling.
    """
    def __init__(self, iceServers: Optional[List[RTCIceServer]] = ...) -> None:
        ...
    
    @property
    def state(self) -> str:
        """
        The current state of the ICE gatherer.
        """
        ...
    
    async def gather(self) -> None:
        """
        Gather ICE candidates.
        """
        ...
    
    @classmethod
    def getDefaultIceServers(cls) -> List[RTCIceServer]:
        """
        Return the list of default :class:`RTCIceServer`.
        """
        ...
    
    def getLocalCandidates(self) -> List[RTCIceCandidate]:
        """
        Retrieve the list of valid local candidates associated with the ICE
        gatherer.
        """
        ...
    
    def getLocalParameters(self) -> RTCIceParameters:
        """
        Retrieve the ICE parameters of the ICE gatherer.

        :rtype: RTCIceParameters
        """
        ...
    


class RTCIceTransport(AsyncIOEventEmitter):
    """
    The :class:`RTCIceTransport` interface allows an application access to
    information about the Interactive Connectivity Establishment (ICE)
    transport over which packets are sent and received.

    :param gatherer: An :class:`RTCIceGatherer`.
    """
    def __init__(self, gatherer: RTCIceGatherer) -> None:
        ...
    
    @property
    def iceGatherer(self) -> RTCIceGatherer:
        """
        The ICE gatherer passed in the constructor.
        """
        ...
    
    @property
    def role(self) -> str:
        """
        The current role of the ICE transport.

        Either `'controlling'` or `'controlled'`.
        """
        ...
    
    @property
    def state(self) -> str:
        """
        The current state of the ICE transport.
        """
        ...
    
    async def addRemoteCandidate(self, candidate: Optional[RTCIceCandidate]) -> None:
        """
        Add a remote candidate.

        :param candidate: The new candidate or `None` to signal end of candidates.
        """
        ...
    
    def getRemoteCandidates(self) -> List[RTCIceCandidate]:
        """
        Retrieve the list of candidates associated with the remote
        :class:`RTCIceTransport`.
        """
        ...
    
    async def start(self, remoteParameters: RTCIceParameters) -> None:
        """
        Initiate connectivity checks.

        :param remoteParameters: The :class:`RTCIceParameters` associated with
                                  the remote :class:`RTCIceTransport`.
        """
        ...
    
    async def stop(self) -> None:
        """
        Irreversibly stop the :class:`RTCIceTransport`.
        """
        ...
    


