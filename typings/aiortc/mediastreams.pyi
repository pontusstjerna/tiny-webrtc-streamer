"""
This type stub file was generated by pyright.
"""

import fractions
from abc import ABCMeta, abstractmethod
from typing import Tuple, Union
from av.frame import Frame
from av.packet import Packet
from pyee.asyncio import AsyncIOEventEmitter

AUDIO_PTIME = ...
VIDEO_CLOCK_RATE = ...
VIDEO_PTIME = ...
VIDEO_TIME_BASE = ...
def convert_timebase(pts: int, from_base: fractions.Fraction, to_base: fractions.Fraction) -> int:
    ...

class MediaStreamError(Exception):
    ...


class MediaStreamTrack(AsyncIOEventEmitter, metaclass=ABCMeta):
    """
    A single media track within a stream.
    """
    kind = ...
    def __init__(self) -> None:
        ...
    
    @property
    def id(self) -> str:
        """
        An automatically generated globally unique ID.
        """
        ...
    
    @property
    def readyState(self) -> str:
        ...
    
    @abstractmethod
    async def recv(self) -> Union[Frame, Packet]:
        """
        Receive the next :class:`~av.audio.frame.AudioFrame`,
        :class:`~av.video.frame.VideoFrame` or :class:`~av.packet.Packet`
        """
        ...
    
    def stop(self) -> None:
        ...
    


class AudioStreamTrack(MediaStreamTrack):
    """
    A dummy audio track which reads silence.
    """
    kind = ...
    _start: float
    _timestamp: int
    async def recv(self) -> Frame:
        """
        Receive the next :class:`~av.audio.frame.AudioFrame`.

        The base implementation just reads silence, subclass
        :class:`AudioStreamTrack` to provide a useful implementation.
        """
        ...
    


class VideoStreamTrack(MediaStreamTrack):
    """
    A dummy video track which reads green frames.
    """
    kind = ...
    _start: float
    _timestamp: int
    async def next_timestamp(self) -> Tuple[int, fractions.Fraction]:
        ...
    
    async def recv(self) -> Frame:
        """
        Receive the next :class:`~av.video.frame.VideoFrame`.

        The base implementation just reads a 640x480 green frame at 30fps,
        subclass :class:`VideoStreamTrack` to provide a useful implementation.
        """
        ...
    


