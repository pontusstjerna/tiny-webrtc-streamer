"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from .rtcrtpparameters import RTCRtpCodecCapability
from .rtcrtpreceiver import RTCRtpReceiver
from .rtcrtpsender import RTCRtpSender

logger = ...
class RTCRtpTransceiver:
    """
    The RTCRtpTransceiver interface describes a permanent pairing of an
    :class:`RTCRtpSender` and an :class:`RTCRtpReceiver`, along with some
    shared state.
    """
    def __init__(self, kind: str, receiver: RTCRtpReceiver, sender: RTCRtpSender, direction: str = ...) -> None:
        ...
    
    @property
    def currentDirection(self) -> Optional[str]:
        """
        The currently negotiated direction of the transceiver.

        One of `'sendrecv'`, `'sendonly'`, `'recvonly'`, `'inactive'` or `None`.
        """
        ...
    
    @property
    def direction(self) -> str:
        """
        The preferred direction of the transceiver, which will be used in
        :meth:`RTCPeerConnection.createOffer` and
        :meth:`RTCPeerConnection.createAnswer`.

        One of `'sendrecv'`, `'sendonly'`, `'recvonly'` or `'inactive'`.
        """
        ...
    
    @direction.setter
    def direction(self, direction: str) -> None:
        ...
    
    @property
    def kind(self) -> str:
        ...
    
    @property
    def mid(self) -> Optional[str]:
        ...
    
    @property
    def receiver(self) -> RTCRtpReceiver:
        """
        The :class:`RTCRtpReceiver` that handles receiving and decoding
        incoming media.
        """
        ...
    
    @property
    def sender(self) -> RTCRtpSender:
        """
        The :class:`RTCRtpSender` responsible for encoding and sending
        data to the remote peer.
        """
        ...
    
    @property
    def stopped(self) -> bool:
        ...
    
    def setCodecPreferences(self, codecs: List[RTCRtpCodecCapability]) -> None:
        """
        Override the default codec preferences.

        See :meth:`RTCRtpSender.getCapabilities` and
        :meth:`RTCRtpReceiver.getCapabilities` for the supported codecs.

        :param codecs: A list of :class:`RTCRtpCodecCapability`, in decreasing order
                        of preference. If empty, restores the default preferences.
        """
        ...
    
    async def stop(self): # -> None:
        """
        Permanently stops the :class:`RTCRtpTransceiver`.
        """
        ...
    


