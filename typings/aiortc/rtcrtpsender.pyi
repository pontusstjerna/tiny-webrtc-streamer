"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, Union
from .mediastreams import MediaStreamTrack
from .rtcrtpparameters import RTCRtpSendParameters
from .stats import RTCStatsReport

logger = ...
RTT_ALPHA = ...
class RTCEncodedFrame:
    def __init__(self, payloads: List[bytes], timestamp: int, audio_level: int) -> None:
        ...
    


class RTCRtpSender:
    """
    The :class:`RTCRtpSender` interface provides the ability to control and
    obtain details about how a particular :class:`MediaStreamTrack` is encoded
    and sent to a remote peer.

    :param trackOrKind: Either a :class:`MediaStreamTrack` instance or a
                         media kind (`'audio'` or `'video'`).
    :param transport: An :class:`RTCDtlsTransport`.
    """
    def __init__(self, trackOrKind: Union[MediaStreamTrack, str], transport) -> None:
        ...
    
    @property
    def kind(self): # -> str:
        ...
    
    @property
    def track(self) -> MediaStreamTrack:
        """
        The :class:`MediaStreamTrack` which is being handled by the sender.
        """
        ...
    
    @property
    def transport(self):
        """
        The :class:`RTCDtlsTransport` over which media data for the track is
        transmitted.
        """
        ...
    
    @classmethod
    def getCapabilities(self, kind): # -> RTCRtpCapabilities:
        """
        Returns the most optimistic view of the system's capabilities for
        sending media of the given `kind`.

        :rtype: :class:`RTCRtpCapabilities`
        """
        ...
    
    async def getStats(self) -> RTCStatsReport:
        """
        Returns statistics about the RTP sender.

        :rtype: :class:`RTCStatsReport`
        """
        ...
    
    def replaceTrack(self, track: Optional[MediaStreamTrack]) -> None:
        ...
    
    def setTransport(self, transport) -> None:
        ...
    
    async def send(self, parameters: RTCRtpSendParameters) -> None:
        """
        Attempt to set the parameters controlling the sending of media.

        :param parameters: The :class:`RTCRtpSendParameters` for the sender.
        """
        ...
    
    async def stop(self): # -> None:
        """
        Irreversibly stop the sender.
        """
        ...
    


