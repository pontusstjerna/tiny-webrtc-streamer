"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Optional, Union
from pyee.asyncio import AsyncIOEventEmitter

logger = ...
@dataclass
class RTCDataChannelParameters:
    """
    The :class:`RTCDataChannelParameters` dictionary describes the
    configuration of an :class:`RTCDataChannel`.
    """
    label: str = ...
    maxPacketLifeTime: Optional[int] = ...
    maxRetransmits: Optional[int] = ...
    ordered: bool = ...
    protocol: str = ...
    negotiated: bool = ...
    id: Optional[int] = ...


class RTCDataChannel(AsyncIOEventEmitter):
    """
    The :class:`RTCDataChannel` interface represents a network channel which
    can be used for bidirectional peer-to-peer transfers of arbitrary data.

    :param transport: An :class:`RTCSctpTransport`.
    :param parameters: An :class:`RTCDataChannelParameters`.
    """
    def __init__(self, transport, parameters: RTCDataChannelParameters, send_open: bool = ...) -> None:
        ...
    
    @property
    def bufferedAmount(self) -> int:
        """
        The number of bytes of data currently queued to be sent over the data channel.
        """
        ...
    
    @property
    def bufferedAmountLowThreshold(self) -> int:
        """
        The number of bytes of buffered outgoing data that is considered "low".
        """
        ...
    
    @bufferedAmountLowThreshold.setter
    def bufferedAmountLowThreshold(self, value: int) -> None:
        ...
    
    @property
    def negotiated(self) -> bool:
        """
        Whether data channel was negotiated out-of-band.
        """
        ...
    
    @property
    def id(self) -> Optional[int]:
        """
        An ID number which uniquely identifies the data channel.
        """
        ...
    
    @property
    def label(self) -> str:
        """
        A name describing the data channel.

        These labels are not required to be unique.
        """
        ...
    
    @property
    def ordered(self) -> bool:
        """
        Indicates whether or not the data channel guarantees in-order delivery of
        messages.
        """
        ...
    
    @property
    def maxPacketLifeTime(self) -> Optional[int]:
        """
        The maximum time in milliseconds during which transmissions are attempted.
        """
        ...
    
    @property
    def maxRetransmits(self) -> Optional[int]:
        """
        "The maximum number of retransmissions that are attempted.
        """
        ...
    
    @property
    def protocol(self) -> str:
        """
        The name of the subprotocol in use.
        """
        ...
    
    @property
    def readyState(self) -> str:
        """
        A string indicating the current state of the underlying data transport.
        """
        ...
    
    @property
    def transport(self):
        """
        The :class:`RTCSctpTransport` over which data is transmitted.
        """
        ...
    
    def close(self) -> None:
        """
        Close the data channel.
        """
        ...
    
    def send(self, data: Union[bytes, str]) -> None:
        """
        Send `data` across the data channel to the remote peer.
        """
        ...
    


