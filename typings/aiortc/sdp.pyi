"""
This type stub file was generated by pyright.
"""

import enum
from dataclasses import dataclass
from typing import Any, List, Optional, Tuple, Union
from .rtcicetransport import RTCIceCandidate
from .rtcrtpparameters import ParametersDict

DIRECTIONS = ...
DTLS_ROLE_SETUP = ...
DTLS_SETUP_ROLE = ...
FMTP_INT_PARAMETERS = ...
class BitPattern:
    def __init__(self, v: str) -> None:
        ...
    
    def matches(self, v: int) -> bool:
        ...
    


class H264Profile(enum.Enum):
    PROFILE_CONSTRAINED_BASELINE = ...
    PROFILE_BASELINE = ...
    PROFILE_MAIN = ...
    PROFILE_CONSTRAINED_HIGH = ...
    PROFILE_HIGH = ...
    PROFILE_PREDICTIVE_HIGH_444 = ...


class H264Level(enum.IntEnum):
    LEVEL1_B = ...
    LEVEL1 = ...
    LEVEL1_1 = ...
    LEVEL1_2 = ...
    LEVEL1_3 = ...
    LEVEL2 = ...
    LEVEL2_1 = ...
    LEVEL2_2 = ...
    LEVEL3 = ...
    LEVEL3_1 = ...
    LEVEL3_2 = ...
    LEVEL4 = ...
    LEVEL4_1 = ...
    LEVEL4_2 = ...
    LEVEL5 = ...
    LEVEL5_1 = ...
    LEVEL5_2 = ...


H264_PROFILE_PATTERNS = ...
def candidate_from_sdp(sdp: str) -> RTCIceCandidate:
    ...

def candidate_to_sdp(candidate: RTCIceCandidate) -> str:
    ...

def grouplines(sdp: str) -> Tuple[List[str], List[List[str]]]:
    ...

def ipaddress_from_sdp(sdp: str) -> str:
    ...

def ipaddress_to_sdp(addr: str) -> str:
    ...

def parameters_from_sdp(sdp: str) -> ParametersDict:
    ...

def parameters_to_sdp(parameters: ParametersDict) -> str:
    ...

def parse_attr(line: str) -> Tuple[str, Optional[str]]:
    ...

def parse_h264_profile_level_id(profile_str: str) -> Tuple[H264Profile, H264Level]:
    ...

@dataclass
class GroupDescription:
    semantic: str
    items: List[Union[int, str]]
    def __str__(self) -> str:
        ...
    


def parse_group(dest: List[GroupDescription], value: str, type=...) -> None:
    ...

@dataclass
class SsrcDescription:
    ssrc: int
    cname: Optional[str] = ...
    msid: Optional[str] = ...
    mslabel: Optional[str] = ...
    label: Optional[str] = ...


SSRC_INFO_ATTRS = ...
class MediaDescription:
    def __init__(self, kind: str, port: int, profile: str, fmt: List[Any]) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class SessionDescription:
    def __init__(self) -> None:
        ...
    
    @classmethod
    def parse(cls, sdp: str): # -> Self:
        ...
    
    def webrtc_track_id(self, media: MediaDescription) -> Optional[str]:
        ...
    
    def __str__(self) -> str:
        ...
    


